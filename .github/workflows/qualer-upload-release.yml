name: Upload & Release on Merge

on:
  push:
    branches:
      - main

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Check for Excel File Changes
        id: check
        run: |
          if git diff --quiet HEAD^ HEAD -- '*.xlsm'; then
            echo "✅ No Excel files changed. Skipping upload."
            echo "skip=true" >> $GITHUB_ENV
            exit 0
          fi
      - name: Ensure Only One File is Changed
        if: env.skip != 'true'
        run: |
          FILE_COUNT=$(git diff --name-only HEAD^ HEAD -- '*.xlsm' | wc -l)
          if [ "$FILE_COUNT" -ne 1 ]; then
            echo "❌ More than one Excel file changed. Aborting upload."
            exit 1
          fi
          FILE_PATH=$(git diff --name-only HEAD^ HEAD -- '*.xlsm')
          echo "MERGED_FILE=$FILE_PATH" >> $GITHUB_ENV
      - name: Checkout `ci-scripts` Repository
        if: env.skip != 'true'
        uses: actions/checkout@v3
        with:
          repository: Johnson-Gage-Inspection-Inc/ci-scripts
          path: ci-scripts
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure `upload_sop.sh` is Executable
        if: env.skip != 'true'
        run: chmod +x ./ci-scripts/upload_sop.sh

      - name: Get Commit Hash
        id: commit_hash
        run: echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Get Commit Author
        id: commit_author
        run: |
          author_name=$(git log -1 --pretty=format:'%an')
          echo "author_name=$author_name" >> $GITHUB_ENV
      - name: Run Upload Script
        if: env.skip != 'true'
        run: ./ci-scripts/upload_sop.sh
        env:
          QUALER_EMAIL: ${{ secrets.QUALER_EMAIL }}
          QUALER_PASSWORD: ${{ secrets.QUALER_PASSWORD }}
          SOP_ID: ${{ env.SOP_ID }}
          MERGED_FILE: ${{ env.MERGED_FILE }}
          COMMIT_HASH: ${{ env.commit_hash }}
          AUTHOR_NAME: ${{ env.author_name }}
          DOC_ID: ${{ env.DOC_ID }}
          DOC_TITLE: ${{ env.DOC_TITLE }}
          DOC_DETAILS: ${{ env.DOC_DETAILS }}

  create-release:
    runs-on: ubuntu-latest
    needs: upload  # Ensures upload must succeed first

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get Current Date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Rename File with Date Suffix
        run: |
          NEW_NAME="Form_3018_Rockwell_${{ env.date }}.xlsm"
          mv "${{ env.MERGED_FILE }}" "$NEW_NAME"
          echo "RENAMED_FILE=$NEW_NAME" >> $GITHUB_ENV
      - name: Get PR Description
        id: pr_body
        run: |
          PR_NUMBER=$(gh pr list --base main --state merged --limit 1 --json number --jq '.[0].number' || echo "")
          if [[ -z "$PR_NUMBER" ]]; then
            echo "❌ No merged PR found for this commit. Falling back to commit message."
            echo "pr_body=" >> $GITHUB_ENV
          else
            PR_BODY=$(gh pr view "$PR_NUMBER" --json body --jq '.body' || echo "")
            if [[ -z "$PR_BODY" ]]; then
              echo "⚠️ PR found, but no description available. Using commit message."
            fi
            echo "✅ PR Body Retrieved."
            echo "pr_body=$PR_BODY" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Latest Commit Message
        id: commit_message
        run: echo "commit_msg=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.commit_hash }}
          generate_release_notes: true
          body: "${{ env.pr_body || env.commit_msg }}"
          files: "${{ env.RENAMED_FILE }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}